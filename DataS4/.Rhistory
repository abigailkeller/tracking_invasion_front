#convert to lat/long
ras_proj <- projectRaster(ras1, crs='+proj=longlat +datum=WGS84')
#convert to data frame
ras_df <- as.data.frame(ras_proj, xy = TRUE)
#convert to data frame
ras_df <- as.data.frame(ras_proj, xy = TRUE)
#rename columns
colnames(ras_df) <- c('x','y','fill')
#make fill two colors
ras_df <- ras_df %>%
mutate(fill_color = ifelse(fill>=212 & fill < 220, 'lightgrey','white'))
ggplot() +
geom_raster(data=ras_df,
aes(x=x,y=y,
fill=fill_color))
ggplot() +
geom_raster(data=ras_df,
aes(x=x,y=y,
fill=fill))
min(ras_df$fill)
#convert to data frame
ras_df <- as.data.frame(ras_proj, xy = TRUE, na.rm = TRUE)
#rename columns
colnames(ras_df) <- c('x','y','fill')
min(ras_df$fill)
#make fill two colors
ras_df <- ras_df %>%
mutate(fill_color = ifelse(fill>211 & fill < 220, 'lightgrey','white'))
ggplot() +
geom_raster(data=ras_df,
aes(x=x,y=y,
fill=fill_color))
#create box for extent
box <- st_bbox(c(xmin = -124.770349,
xmax = -121.625513,
ymax = 49.217414,
ymin = 46.279341),
crs = st_crs(4326))
#import basemap
basemap_raster <- basemap_raster(box, map_service = 'carto',
map_type = 'light_no_labels', force = TRUE)
#use just first layer of raster brick
ras1 <- subset(basemap_raster, 1)
#use just first layer of raster brick
ras1 <- subset(basemap_raster, 1)
#convert to lat/long
ras_proj <- projectRaster(ras1, crs='+proj=longlat +datum=WGS84')
#convert to data frame
ras_df <- as.data.frame(ras_proj, xy = TRUE, na.rm = TRUE)
#rename columns
colnames(ras_df) <- c('x','y','fill')
#make fill two colors
ras_df <- ras_df %>%
mutate(fill_color = ifelse(fill>211 & fill < 220, 'lightgrey','white'))
ggplot() +
geom_raster(data=ras_df,
aes(x=x,y=y,
fill=fill_color))
#create box for extent
box <- st_bbox(c(xmin = -125.9,
xmax = -121.625513,
ymax = 49.217414,
ymin = 46.279341),
crs = st_crs(4326))
#import basemap
basemap_raster <- basemap_raster(box, map_service = 'carto',
map_type = 'light_no_labels', force = TRUE)
#create box for extent
box <- st_bbox(c(xmin = -125.9,
xmax = -121.625513,
ymax = 49.217414,
ymin = 46.279341),
crs = st_crs(4326))
#import basemap
basemap_raster <- basemap_raster(box, map_service = 'carto',
map_type = 'light_no_labels', force = TRUE)
ggplot() +
geom_raster(data=ras_df,
aes(x=x,y=y,
fill=fill_color))
ggplot() +
geom_raster(data=ras_df,
aes(x=x,y=y,
fill=fill_color)) +
scale_x_continuous(limits=c(-124,122))
ggplot() +
geom_raster(data=ras_df,
aes(x=x,y=y,
fill=fill_color)) +
scale_x_continuous(limits=c(-124,-122))
ggplot() +
geom_rect(data=ras_df,
aes(x=x,y=y,
fill=fill_color))
ggplot() +
geom_tile(data=ras_df,
aes(x=x,y=y,
fill=fill_color))
ggplot() +
geom_tile(data=ras_df,
aes(x=x,y=y,
fill=fill_color))
box <- st_bbox(c(xmin = -125.6,
xmax = -121,
ymax = 49.25,
ymin = 46.1),
crs = st_crs(4326))
#import basemap
basemap_ggplot <- basemap_ggplot(box, map_service = 'carto',
map_type = 'light_no_labels', force = TRUE)
setwd("~/SMEA/Thesis/EcoApps_submission/Model_code/Data_S4")
#import csv
NB_posterior <- read.csv('Joint_posterior.csv')
View(NB_posterior)
#import csv
posterior <- read.csv('Joint_posterior.csv')
#get just mu
mu <- posterior[,-c('phi','beta','p10')]
#get just mu
cols_remove <- c('phi','beta','p10')
mu <- posterior[,!c('phi','beta','p10')]
mu <- posterior[,!(colnames(posterior) %in% cols_remove)]
View(mu)
#import data
joint_posterior <- read.csv('Joint_posterior.csv')
trap_posterior <- read.csv('Trap_only_posterior.csv')
site_data <- read.csv('site_data.csv')
#get just mu estimates
cols_remove <- c('phi','beta','p10')
joint_mu <- joint_posterior[,!(colnames(joint_posterior) %in% cols_remove)]
trap_mu <- trap_posterior[,!(colnames(trap_posterior) %in% cols_remove)]
#calculate 75% and 89% credibility intervals
#median and credibility intervals of of joint model mu
CI_joint <- as.data.frame(matrix(NA, nrow = 20, ncol = 6))
colnames(CI_joint) <- c('param', 'median', 'low89', 'high89',
'low75','high75')
CI_joint$param <- colnames(joint_mu[1:20])
for(i in 1:20){
CI_joint[i,2] <- median(NB_mu[,i])
CI_joint[i,3] <- ci(NB_mu[,i], method = 'HDI', ci = 0.89)[2]
CI_joint[i,4] <- ci(NB_mu[,i], method = 'HDI', ci = 0.89)[3]
CI_joint[i,5] <- ci(NB_mu[,i], method = 'HDI', ci = 0.75)[2]
CI_joint[i,6] <- ci(NB_mu[,i], method = 'HDI', ci = 0.75)[3]
}
for(i in 1:20){
CI_joint[i,2] <- median(NB_mu[,i])
CI_joint[i,3] <- ci(joint_mu[,i], method = 'HDI', ci = 0.89)[2]
CI_joint[i,4] <- ci(joint_mu[,i], method = 'HDI', ci = 0.89)[3]
CI_joint[i,5] <- ci(joint_mu[,i], method = 'HDI', ci = 0.75)[2]
CI_joint[i,6] <- ci(joint_mu[,i], method = 'HDI', ci = 0.75)[3]
}
for(i in 1:20){
CI_joint[i,2] <- median(joint_mu[,i])
CI_joint[i,3] <- ci(joint_mu[,i], method = 'HDI', ci = 0.89)[2]
CI_joint[i,4] <- ci(joint_mu[,i], method = 'HDI', ci = 0.89)[3]
CI_joint[i,5] <- ci(joint_mu[,i], method = 'HDI', ci = 0.75)[2]
CI_joint[i,6] <- ci(joint_mu[,i], method = 'HDI', ci = 0.75)[3]
}
library(bayestestR)
for(i in 1:20){
CI_joint[i,2] <- median(joint_mu[,i])
CI_joint[i,3] <- ci(joint_mu[,i], method = 'HDI', ci = 0.89)[2]
CI_joint[i,4] <- ci(joint_mu[,i], method = 'HDI', ci = 0.89)[3]
CI_joint[i,5] <- ci(joint_mu[,i], method = 'HDI', ci = 0.75)[2]
CI_joint[i,6] <- ci(joint_mu[,i], method = 'HDI', ci = 0.75)[3]
}
CI_joint <- CI_joint %>%
mutate(type = 'joint')
library(tidyverse)
library(cowplot)
library(scales)
CI_joint <- CI_joint %>%
mutate(type = 'joint')
#median and credibility intervals of of trap model mu
CI_trap <- as.data.frame(matrix(NA, nrow = 20, ncol = 6))
colnames(CI_trap) <- c('param', 'median', 'low89', 'high89',
'low75','high75')
CI_trap$param <- colnames(trap_mu[1:20])
for(i in 1:20){
CI_trap[i,2] <- median(trap_mu[,i])
CI_trap[i,3] <- ci(trap_mu[,i], method = 'HDI', ci = 0.89)[2]
CI_trap[i,4] <- ci(trap_mu[,i], method = 'HDI', ci = 0.89)[3]
CI_trap[i,5] <- ci(trap_mu[,i], method = 'HDI', ci = 0.75)[2]
CI_trap[i,6] <- ci(trap_mu[,i], method = 'HDI', ci = 0.75)[3]
}
CI_trap <- CI_trap %>%
mutate(type = 'trap')
#combine joint and trap models
all_data <- rbind(CI_joint, CI_trap)
#add site name
all_data <- full_join(all_data,site_data, by='param')
#reorder type
all_data$type <- factor(all_data$type,
levels = c('trap', 'joint'))
#big boxplot
bigboxplot <- ggplot(all_data) +
geom_boxplot(aes(x=fct_reorder(Site,median),
ymin=low89, lower=low75, middle=median,
upper=high75, ymax=high89,
fill = as.factor(type)),
stat='identity',
width = 0.5,
lwd = 0.75,
fatten = 1,
position = position_dodge(0.6)) +
scale_fill_manual(values = c('skyblue', 'indianred1'),
labels = c('Trap-only Model',
'Joint Model')) +
labs(x = '',
y = expression(paste(hat(mu), ' (Green Crab Density)')),
fill = '') +
theme_minimal() +
theme(legend.key.size = unit(2, 'cm'),
axis.text = element_text(size = 20),
axis.title = element_text(size = 30),
legend.text = element_text(size = 30),
plot.title = element_text(size = 30, face = 'bold')) +
ggtitle('A')
#subset for the little boxplot
small_data <- all_data[all_data$Site=='KVI'|
all_data$Site=='GSC'|
all_data$Site=='CHU'|
all_data$Site=='JIM'|
all_data$Site=='IND'|
all_data$Site=='WLS'|
all_data$Site=='CAC'|
all_data$Site=='PIL'|
all_data$Site=='RAA'|
all_data$Site=='TIT',]
#small boxplot
smallboxplot <- ggplot(small_data) +
geom_boxplot(aes(x=fct_reorder(Site,median),
ymin=low89, lower=low75, middle=median,
upper=high75, ymax=high89,
fill = as.factor(type)),
stat='identity',
width = 0.5,
lwd = 0.75,
fatten = 1,
position = position_dodge(0.6)) +
scale_fill_manual(values = c('skyblue', 'indianred1'),
labels = c('Trap-only Model',
'Joint Model')) +
labs(x = '',
y = expression(paste(hat(mu), ' (Green Crab Density)')),
fill = '') +
theme_minimal() +
theme(axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
plot.title = element_text(face = 'bold', size = 30),
legend.position = "none",
plot.background = element_rect(colour = "black", fill=NA, size=1.25)) +
ggtitle('B')
#place zoomed in boxplot as inset within larger boxplot
plot_w_inset <- ggdraw(bigboxplot) +
draw_plot(smallboxplot, x = 0.1, y = 0.4,
width = 0.45, height = 0.5)
plot_w_inset
#import data
NB_posterior <- read.csv('Joint_posterior.csv')
#import data
joint_posterior <- read.csv('Joint_posterior.csv')
trap_posterior <- read.csv('Trap_only_posterior.csv')
trap_data <- read.csv("trap_data.csv")
site_data <- read.csv('site_data.csv')
trap_data <- read.csv("trap_data.csv")
trap_data <- read.csv("trap_data.csv")
#calculate trap-only and joint means and sd
joint_means <- joint_posterior %>%
summarize_all(mean) #joint model means
joint_sd <- joint_posterior %>%
summarize_all(sd) #joint model sd
trap_means <- trap_posterior %>%
summarize_all(mean) #trap-only means
trap_sd <- trap_posterior %>%
summarize_all(sd) #trap-only sd
#merge joint stats and trap stats
#joint stats - mean
joint_means <- as.data.frame(t(joint_means))
param_joint <- rownames(joint_means)
joint_means <- cbind(param_joint, joint_means)
colnames(joint_means) <- c('param', 'joint_mean')
#joint stats - sd
joint_sd <- as.data.frame(t(joint_sd))
param_joint <- rownames(joint_sd)
joint_sd <- cbind(param_joint, joint_sd)
colnames(joint_sd) <- c('param', 'joint_sd')
#trap stats - mean
trap_means <- as.data.frame(t(trap_means))
param_trap <- rownames(trap_means)
trap_means <- cbind(param_trap, trap_means)
colnames(trap_means) <- c('param', 'trap_mean')
#trap stats - sd
trap_sd <- as.data.frame(t(trap_sd))
param_trap <- rownames(trap_sd)
trap_sd <- cbind(param_trap, trap_sd)
colnames(trap_sd) <- c('param', 'trap_sd')
#merge all
joint_stats <- merge(joint_means, joint_sd, by = 'param')
trap_stats <- merge(trap_means, trap_sd, by = 'param')
all_stats <- merge(joint_stats, trap_stats, by = 'param')
#calculate number of traps per site
trap_sum <- as.data.frame(table(trap_data$Site))
colnames(trap_sum) <- c('Site', 'Count')
trap_sum <- merge(trap_sum, site_data, by = 'Site')
#add trap count to model means
all_data <- merge(all_stats, trap_sum, by = 'param')
#calculate difference in mean and coefficient of variation
all_data <- all_data %>%
mutate(mean_dif = joint_mean - trap_mean,
CV_trap = trap_sd/trap_mean,
CV_joint = joint_sd/joint_mean,
CV_dif = CV_trap - CV_joint,
mean_dif_abs = abs(mean_dif))
#create data for model fit line
model_fit <- as.data.frame(seq(from=3, to=420, by = 1))
colnames(model_fit) <- 'traps'
model_fit <- model_fit %>%
mutate(log_traps = log(traps),
CV_pred = 54*exp(log_traps*-2.94))
#reorder region
all_data$Region <- factor(all_data$Region, levels=c('Central_Sound',
'South_Sound', 'Coast', 'Whatcom'))
#plot of number of traps vs. CV dif
cv_plot <- ggplot() +
geom_line(data = model_fit,
aes(x = traps,
y = CV_pred),
color = 'gray',
size = 1.25) +
geom_point(data = all_data,
aes(x = Count,
y = CV_dif,
color = as.factor(Region)),
size = 4.5,
alpha = 0.6) +
scale_x_log10() +
scale_color_manual(values = c('blue', 'orange',
'green4', 'red'),
labels = c('Central Sound',
'South Sound',
'WA Coast',
'Whatcom')) +
labs(x = 'Number of Traps',
y = expression(Delta~'CV'),
color = 'Region') +
theme_minimal() +
theme(legend.title = element_text(hjust = 0.5),
text = element_text(size = 16))
cv_plot
library(tidyverse)
library(scales)
#load csv
joint_posterior <- read.csv('Joint_posterior.csv')
#calculate trap-only and joint median
joint_median <- joint_posterior %>%
summarize_all(median) #joint model medians
#extract estimates
est_phi <- joint_median$phi
est_beta <- joint_median$beta
est_p10 <- joint_median$p10
#number of traps to get at least one crab
mu <- seq(from = 0.06, to = 2,
by = 0.01)
pr <- vector(length = length(mu))
ntrap <- vector(length = length(mu))
for(i in 1:length(mu)){
pr[i] <- 1 - pnbinom(q = 0, mu = mu[i], size = est_phi)  #prob of getting at least 1 crab in a trap
ntrap[i] <- which(qbinom(0.05, size = 1:1000, prob = pr[i]) == 1) %>% min
}
#number of qPCR reactions to get at least one true detection (among 3 replicates)
p11 <- vector(length = length(mu))
p_3 <- vector(length = length(mu))
nqpcr_3 <- vector(length = length(mu))
for(i in 1:length(mu)){
p11[i] <- mu[i]/(mu[i]+est_beta)
p_3[i] <- 1 - pbinom(0, size = 3, prob = p11[i])
nqpcr_3[i] <- which(qbinom(0.05, size = 1:1000, prob = p_3[i]) == 1) %>%  min
}
#create one dataframe
trap <- as.data.frame(cbind(mu,ntrap))
colnames(trap) <- c('mu', 'effort')
trap <- trap %>%
mutate(type = 'trap')
pcr3 <- as.data.frame(cbind(mu,nqpcr_3))
colnames(pcr3) <- c('mu', 'effort')
pcr3 <- pcr3 %>%
mutate(type = 'pcr3')
all_type <- rbind(trap, pcr3)
#plot
effort <- ggplot() +
geom_smooth(data = all_type,
aes(x = mu,
y = effort,
color = type),
size = 1.25,
fill = NA) +
labs(x = expression(mu ~ ' (Crabs/Trap)'),
y = 'Sampling Effort',
color = "Sampling Type")  +
scale_color_manual(labels = c('eDNA Sampling: \n# Water Bottles \n',
'Traditional Sampling: \n# Traps'),
values = c('cornflowerblue',
'coral3')) +
scale_x_continuous(breaks = c(0.1, 0.5, 1.0,
1.5, 2.0)) +
theme_minimal() +
theme(legend.title.align=0.5)
effort
library(tidyverse)
library(akima)
#import simulation data
joint_data <- read.csv('simulation_joint_summary.csv')
trap_data <- read.csv('simulation_trap_summary.csv')
input_data <- read.csv('simulation_scenarios.csv')
#add rank for mu and traps
input_data <- input_data %>%
mutate(rank_mu = rep(1:9,11),
rank_trap = sort(rep(1:11,9)))
View(input_data)
View(joint_data)
View(trap_data)
input_data <- read.csv('simulation_scenarios.csv')
View(input_data)
#import data
joint_posterior <- read.csv('Joint_posterior.csv')
trap_posterior <- read.csv('Trap_only_posterior.csv')
trap_data <- read.csv("trap_data.csv")
site_data <- read.csv('site_data.csv')
#calculate trap-only and joint means and sd
joint_means <- joint_posterior %>%
summarize_all(mean) #joint model means
joint_sd <- joint_posterior %>%
summarize_all(sd) #joint model sd
trap_means <- trap_posterior %>%
summarize_all(mean) #trap-only means
trap_sd <- trap_posterior %>%
summarize_all(sd) #trap-only sd
#merge joint stats and trap stats
#joint stats - mean
joint_means <- as.data.frame(t(joint_means))
param_joint <- rownames(joint_means)
joint_means <- cbind(param_joint, joint_means)
colnames(joint_means) <- c('param', 'joint_mean')
#joint stats - sd
joint_sd <- as.data.frame(t(joint_sd))
param_joint <- rownames(joint_sd)
joint_sd <- cbind(param_joint, joint_sd)
colnames(joint_sd) <- c('param', 'joint_sd')
#trap stats - mean
trap_means <- as.data.frame(t(trap_means))
param_trap <- rownames(trap_means)
trap_means <- cbind(param_trap, trap_means)
colnames(trap_means) <- c('param', 'trap_mean')
#trap stats - sd
trap_sd <- as.data.frame(t(trap_sd))
param_trap <- rownames(trap_sd)
trap_sd <- cbind(param_trap, trap_sd)
colnames(trap_sd) <- c('param', 'trap_sd')
#merge all
joint_stats <- merge(joint_means, joint_sd, by = 'param')
trap_stats <- merge(trap_means, trap_sd, by = 'param')
all_stats <- merge(joint_stats, trap_stats, by = 'param')
#calculate number of traps per site
trap_sum <- as.data.frame(table(trap_data$Site))
colnames(trap_sum) <- c('Site', 'Count')
trap_sum <- merge(trap_sum, site_data, by = 'Site')
#add trap count to model means
all_data <- merge(all_stats, trap_sum, by = 'param')
#calculate difference in mean and coefficient of variation
all_data <- all_data %>%
mutate(mean_dif = joint_mean - trap_mean,
CV_trap = trap_sd/trap_mean,
CV_joint = joint_sd/joint_mean,
CV_dif = CV_trap - CV_joint,
mean_dif_abs = abs(mean_dif))
#create data for model fit line
model_fit <- as.data.frame(seq(from=3, to=420, by = 1))
colnames(model_fit) <- 'traps'
model_fit <- model_fit %>%
mutate(log_traps = log(traps),
CV_pred = 54*exp(log_traps*-2.94))
#reorder region
all_data$Region <- factor(all_data$Region, levels=c('Central_Sound',
'South_Sound', 'Coast', 'Whatcom'))
#plot of number of traps vs. CV dif
cv_plot <- ggplot() +
geom_line(data = model_fit,
aes(x = traps,
y = CV_pred),
color = 'gray',
size = 1.25) +
geom_point(data = all_data,
aes(x = Count,
y = CV_dif,
color = as.factor(Region)),
size = 4.5,
alpha = 0.6) +
scale_x_log10() +
scale_color_manual(values = c('blue', 'orange',
'green4', 'red'),
labels = c('Central Sound',
'South Sound',
'WA Coast',
'Whatcom')) +
labs(x = 'Number of Traps',
y = expression(Delta~'CV'),
color = 'Region') +
theme_minimal() +
theme(legend.title = element_text(hjust = 0.5),
text = element_text(size = 16))
cv_plot
